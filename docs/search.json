[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Zuur & Ieno’s 10 steps",
    "section": "",
    "text": "This website in a reproducible exploration of “A protocol for conducting and presenting results of regression-type analyses” by Alain F. Zuur, and Elena N. Ieno.\nThe 10 steps are all first presented in figure 1 of the paper:\n\n\n\nThe 10 steps of regression analyses.\n\n\nThe focus of the 10 steps on on linear modelling of the type GLM, GLMM etc and uses R although it generalizes to other languages.\nI found difficult that the authors chose to use different datasets to illustrate different steps. Why not show the entire workflow for one dataset and better demonstrate the entire workflow? Did the authors fear that the use of a single open dataset was limiting for publication?\n\nAccessing data and code for reproducibility\nThe paper provides data and code on Dryad but is not set up for interactive report-style reproducibility with package versioning (see the end of this section for a note about package age). To fix that, I used a quarto document with renv to produce this website. In order to reproduce the analysis here, you can clone the repository in RStudio, install the renv package, run renv::restore() and you should be good to go for running the quarto notebook!\nIn order to access the data and code, we would ideally use a package like rdryad to do so, but I have been getting nowhere with it. It is probably broken as it is soon to be superseded by the deposits package. If I forget to update this website with the latest deposits API, feel free the file an issue.\nIn the meantime, let’s download the files one by one.\n\n# Create the file urls and destination files names & names\nbase_dryad_url &lt;- \"https://datadryad.org/stash/downloads/file_stream/\"\nfile_url_list &lt;- paste0(base_dryad_url, c(37547:37550))\nfiles_names &lt;- c(\"monkeys.txt\", \"owls.txt\", \"oystercatchers.txt\", \"zurr_iena_2016.R\")\nfiles_paths_list &lt;- paste0(c(rep(\"data/\", 3), \"scripts/\"), files_names)\n\n# If the file exists already, do not download it\nret &lt;- mapply(\\(file_url, file_path) {\n  if (!file.exists(file_path)) download.file(file_url, destfile =  file_path)\n}, file_url_list, files_paths_list)\n\nYou can take a look at the code in the scripts directory, we will be copying code from there into this document. Now, let’s load the data properly before we get anything else done.\n\nlibrary(here)\n\nhere() starts at /home/vlucet/Documents/WILDLab/repos/ZuurIeno10steps\n\nOwls &lt;- read.table(here(\"data\", \"owls.txt\"), \n                   header = TRUE,\n                   dec = \".\")\n\n# SiblingNegotiation is too long....use shorter name:\nOwls$NCalls &lt;- Owls$SiblingNegotiation\n\n# Let's look at it\nnames(Owls)\n\n [1] \"Nest\"               \"Xcoord\"             \"Ycoord\"            \n [4] \"FoodTreatment\"      \"SexParent\"          \"ArrivalTime\"       \n [7] \"SiblingNegotiation\" \"BroodSize\"          \"NegPerChick\"       \n[10] \"Date\"               \"Day\"                \"Month\"             \n[13] \"NCalls\"            \n\nstr(Owls)\n\n'data.frame':   599 obs. of  13 variables:\n $ Nest              : chr  \"AutavauxTV\" \"AutavauxTV\" \"AutavauxTV\" \"AutavauxTV\" ...\n $ Xcoord            : int  556216 556216 556216 556216 556216 556216 556216 556216 556216 556216 ...\n $ Ycoord            : int  188756 188756 188756 188756 188756 188756 188756 188756 188756 188756 ...\n $ FoodTreatment     : chr  \"Deprived\" \"Deprived\" \"Deprived\" \"Deprived\" ...\n $ SexParent         : chr  \"Male\" \"Male\" \"Male\" \"Male\" ...\n $ ArrivalTime       : num  22.2 22.5 22.6 22.6 22.6 ...\n $ SiblingNegotiation: int  4 2 2 2 2 18 18 3 3 3 ...\n $ BroodSize         : int  5 5 5 5 5 5 5 5 5 5 ...\n $ NegPerChick       : num  0.8 0.4 0.4 0.4 0.4 3.6 3.6 0.6 0.6 0.6 ...\n $ Date              : chr  \"12/07/97\" \"12/07/97\" \"12/07/97\" \"12/07/97\" ...\n $ Day               : int  12 12 12 12 12 12 12 12 12 12 ...\n $ Month             : int  7 7 7 7 7 7 7 7 7 7 ...\n $ NCalls            : int  4 2 2 2 2 18 18 3 3 3 ...\n\nhead(Owls)\n\n        Nest Xcoord Ycoord FoodTreatment SexParent ArrivalTime\n1 AutavauxTV 556216 188756      Deprived      Male       22.25\n2 AutavauxTV 556216 188756      Deprived      Male       22.53\n3 AutavauxTV 556216 188756      Deprived      Male       22.56\n4 AutavauxTV 556216 188756      Deprived      Male       22.61\n5 AutavauxTV 556216 188756      Deprived      Male       22.65\n6 AutavauxTV 556216 188756      Deprived      Male       22.76\n  SiblingNegotiation BroodSize NegPerChick     Date Day Month NCalls\n1                  4         5         0.8 12/07/97  12     7      4\n2                  2         5         0.4 12/07/97  12     7      2\n3                  2         5         0.4 12/07/97  12     7      2\n4                  2         5         0.4 12/07/97  12     7      2\n5                  2         5         0.4 12/07/97  12     7      2\n6                 18         5         3.6 12/07/97  12     7     18\n\n\n\nOC &lt;- read.table(here(\"data\", \"oystercatchers.txt\"), \n                 header = TRUE,\n                 dec = \".\")\n\n# Let's look at it\nnames(OC)\n\n[1] \"ShellLength\" \"Month\"       \"FeedingType\" \"FeedingPlot\"\n\nstr(OC)\n\n'data.frame':   197 obs. of  4 variables:\n $ ShellLength: num  1.9 2.16 2.17 2.34 2.2 2.2 1.92 2.11 2.17 2.41 ...\n $ Month      : chr  \"Dec\" \"Dec\" \"Dec\" \"Dec\" ...\n $ FeedingType: chr  \"Hammerers\" \"Hammerers\" \"Stabbers\" \"Hammerers\" ...\n $ FeedingPlot: chr  \"B\" \"B\" \"B\" \"B\" ...\n\nhead(OC)\n\n  ShellLength Month FeedingType FeedingPlot\n1        1.90   Dec   Hammerers           B\n2        2.16   Dec   Hammerers           B\n3        2.17   Dec    Stabbers           B\n4        2.34   Dec   Hammerers           B\n5        2.20   Dec    Stabbers           B\n6        2.20   Dec   Hammerers           B\n\n\n\nMonkeys &lt;- read.table(here(\"data\", \"monkeys.txt\"), \n                      header = TRUE)\n\n# Let's look at it\nnames(Monkeys)\n\n [1] \"SubordinateGrooms\" \"DominantGrooms\"    \"RankDifference\"   \n [4] \"Relatedness\"       \"GroomSymmetry\"     \"Time\"             \n [7] \"FocalHour\"         \"FocalGroomer\"      \"Receiver\"         \n[10] \"GroupSize\"        \n\nstr(Monkeys)\n\n'data.frame':   1674 obs. of  10 variables:\n $ SubordinateGrooms: chr  \"yes\" \"yes\" \"yes\" \"yes\" ...\n $ DominantGrooms   : chr  \"no\" \"yes\" \"yes\" \"no\" ...\n $ RankDifference   : num  0.697 0.632 0.169 0.378 0.511 ...\n $ Relatedness      : num  0.224 0.682 0.707 0.291 0.453 ...\n $ GroomSymmetry    : int  1 1 0 1 1 1 0 1 1 1 ...\n $ Time             : num  4.19 5.6 6.16 6.98 2.85 ...\n $ FocalHour        : int  71 72 72 73 74 75 75 75 75 75 ...\n $ FocalGroomer     : chr  \"ade\" \"vic\" \"vic\" \"pre\" ...\n $ Receiver         : chr  \"ban\" \"yao\" \"pre\" \"nai\" ...\n $ GroupSize        : chr  \"large\" \"large\" \"large\" \"large\" ...\n\nhead(Monkeys)\n\n  SubordinateGrooms DominantGrooms RankDifference Relatedness GroomSymmetry\n1               yes             no      0.6969321   0.2238303             1\n2               yes            yes      0.6324555   0.6823489             1\n3               yes            yes      0.1690309   0.7071068             0\n4               yes             no      0.3779645   0.2913760             1\n5               yes            yes      0.5107539   0.4529901             1\n6               yes            yes      0.2948839   0.4539824             1\n      Time FocalHour FocalGroomer Receiver GroupSize\n1 4.186111        71          ade      ban     large\n2 5.601667        72          vic      yao     large\n3 6.164167        72          vic      pre     large\n4 6.976111        73          pre      nai     large\n5 2.850556        74          dys      ver     small\n6 8.605278        75          pox      ecz     small\n\n\nFinally, the load the required packages. Packages maptools and rgdal are deprecated as far as I can tell, and sp is just not recommendable for forward compatibility in 2024. We will attempt to update the spatial code.\n\n# Necessary packages\nlibrary(lattice)  \nlibrary(ggplot2)\nlibrary(ggmap)\n\n# Recommended by the authors but outdated\n# library(maptools) =&gt; We will use other packages\n# library(sp) =&gt; We won't need it with sf\n# library(rgdal) =&gt; We won't need it with sf\n\n# Using sf\nlibrary(sf)\n\n# Additionnal packages\nlibrary(lubridate)\nlibrary(gganimate)\n\n\n\nStep 1: State appropriate questions\nThe key idea is to have the salient question of the analysis in mind at the start, and formulate them properly. The example here is a study on the “vocal behavior of barn owl siblings” with a N = 28. The hypothesis is that food availability will influence “sibling negotiation”, proxied by the number of calls in the nest, sampled with microphones. Half the nests get extra food (treatment: satiated) and the other half is starved (treatment: deprived ; surprisingly no control?).\nThe 3 covariates are time, food treatment (satiated or deprived) and sex of parent. The question is :\n\nDoes the relationship between sibling negotiation and sex of the parent differ with food treatment, and does the effect of time on sibling negotiation differ with food treatment?\n\nNote that the question contains the 3 terms and expected interactions.\nThe authors warn against breaking down the questions into smaller questions such as “Is there an effect of sex of the parent?”, as “A potential problem with this approach is that the residuals of one model may show patterns when compared with the covariates not used in that model, which invalidates the model assumptions.”\nI find this a little surprising because I was taught to build simple models before complex ones, and would naturally work with simpler single covariate models first.\n\n\nStep 2: Visualize the experimental design\nThis step is simple yet sometimes overlooked: visualize the sampling protocol and experimental design preferably with the help of a map.\nBelow we use the sf package to parse the data as spatial data.\n\n# Parse the dataframe as a sf object with the proper projection, and reproject as\n# WGS 84 CRS (LAT / LONG)\nOwls_sf &lt;- st_as_sf(Owls, coords = c(\"Xcoord\", \"Ycoord\"))\n\nWGS84     &lt;- st_crs(\"+proj=longlat +datum=WGS84\")\nprojSWISS &lt;- st_crs(\"+init=epsg:21781\")\n\nWarning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is\ndeprecated. It might return a CRS with a non-EPSG compliant axis order.\n\nst_crs(Owls_sf) &lt;- st_crs(projSWISS)\n\nOwls_sf_tmp &lt;- st_transform(Owls_sf, WGS84)\nOwls_sf_wgs84 &lt;- cbind(Owls_sf_tmp, st_coordinates(Owls_sf_tmp))\n\n# Let's look at it\nhead(Owls_sf_wgs84)\n\nSimple feature collection with 6 features and 13 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6.864574 ymin: 46.84849 xmax: 6.864574 ymax: 46.84849\nGeodetic CRS:  +proj=longlat +datum=WGS84\n        Nest FoodTreatment SexParent ArrivalTime SiblingNegotiation BroodSize\n1 AutavauxTV      Deprived      Male       22.25                  4         5\n2 AutavauxTV      Deprived      Male       22.53                  2         5\n3 AutavauxTV      Deprived      Male       22.56                  2         5\n4 AutavauxTV      Deprived      Male       22.61                  2         5\n5 AutavauxTV      Deprived      Male       22.65                  2         5\n6 AutavauxTV      Deprived      Male       22.76                 18         5\n  NegPerChick     Date Day Month NCalls        X        Y\n1         0.8 12/07/97  12     7      4 6.864574 46.84849\n2         0.4 12/07/97  12     7      2 6.864574 46.84849\n3         0.4 12/07/97  12     7      2 6.864574 46.84849\n4         0.4 12/07/97  12     7      2 6.864574 46.84849\n5         0.4 12/07/97  12     7      2 6.864574 46.84849\n6         3.6 12/07/97  12     7     18 6.864574 46.84849\n                   geometry\n1 POINT (6.864574 46.84849)\n2 POINT (6.864574 46.84849)\n3 POINT (6.864574 46.84849)\n4 POINT (6.864574 46.84849)\n5 POINT (6.864574 46.84849)\n6 POINT (6.864574 46.84849)\n\n\nThe code suggests to write the points as a .kml file to open in Google Earth.\n\n# Write the points as kml, wich you can open in google earth\nowls_kml_file &lt;- here(\"data\", \"Owls_wgs84.kml\")\nif (!file.exists(owls_kml_file)) {\n  st_write(Owls_sf_wgs84, \n           owls_kml_file, \n           driver = \"kml\", delete_dsn = TRUE)\n}\n\nThe code relied ggmap, which makes an API request to Google maps. Of course, in 2024 we are required to use an API key for that. As an alternative I suggest leaflet which is more likely to work in the future and does not require to mess with API keys.\n\nlibrary(leaflet)\nleaflet(Owls_sf_wgs84) %&gt;%\n  addTiles() %&gt;%  # Add default OpenStreetMap map tiles\n  addMarkers()\n\n\n\n\n\nFor a more publication-oriented map with ggmap I would recommend using the stadiamap API.\n\n# I suppress the API message\nglgmap &lt;- suppressMessages(get_stadiamap(c(6.7, 46.70, 7.2, 46.96)))\n\np_ggmap &lt;- ggmap(glgmap) + \n  geom_point(aes(X, Y),\n             data = Owls_sf_wgs84,\n             size = 4) + \n  xlab(\"Longitude\") + ylab(\"Latitude\") + \n  theme(text = element_text(size = 15))\np_ggmap\n\n\n\n\nWe can also do a simple sf + ggplot plot.\n\np_simple &lt;- ggplot(Owls_sf_wgs84) + \n  geom_sf(size = 4) + \n  xlab(\"Longitude\") + ylab(\"Latitude\") + \n  theme_light() + theme(text = element_text(size = 15))\np_simple\n\n\n\n\nFinally, the code suggest another two plots that are not in the paper, but are useful. The first time is a plot of the time series.\n\np_series &lt;- ggplot() + \n  xlab(\"Arrival time\") + ylab(\"Number of calls\") + \n  theme(text = element_text(size = 15)) + theme_light() +\n  geom_point(data = Owls_sf_wgs84,\n             aes(x = ArrivalTime,\n                 y = NCalls,\n                 color = FoodTreatment),\n             size = 2) +\n  geom_line(data = Owls_sf_wgs84,\n            aes(x = ArrivalTime,\n                y = NCalls,\n                group = FoodTreatment,\n                color = FoodTreatment)) + \n  facet_wrap( ~ Nest, ncol = 4)\np_series\n\n\n\n\nThe second shows how sampling unfolds across space and time, but I find the plot a little unwieldy as it facets multiple maps.\n\n# We parse the date column as a proper date\nOwls_sf_wgs84$Date_parsed &lt;- as_date(Owls_sf_wgs84$Date, format = \"%d/%m/%y\")\n\np_ggmap_facet &lt;- ggmap(glgmap) + \n  geom_point(aes(X, Y),\n             data = Owls_sf_wgs84,\n             size = 4) + \n  xlab(\"Longitude\") + ylab(\"Latitude\") + \n  theme(text = element_text(size = 15)) + \n  facet_wrap(~Date_parsed) \n\np_ggmap_facet\n\n\n\n\n\n\nStep 3: Conduct data exploration\nThere is another even older Zurr et al. paper for the 10 steps of data exploration. The first figure of that paper gives you the gist of the protocol.\n\n\n\nThe 10 steps for data exploration.\n\n\nIn that paper, the authors warn against “data dredging”, which is when the patterns explored and discovered during data exploration influence data analysis unhealthily. Modeling and testing decisions should be determined a priori, using knowledge of the system and not a posteriori after exploration of the data. When understanding is limited, we can use exploration to help generate hyotheses, but that is fundamentally different from the principled workflow of this paper.\nThen, the authors warn against certain tests and visual tools, including normality tests. The paper is a useful read and could be the next iteration of that project.\nWe now move from owls to oystercatchers. The study related the length of clams preyed upon and the feeding behavior of oystercatchers, accross time and space. The authors describe how the design suggests a 3-way interaction term that would in practicality only be driven by a couple of data points. The following plot shows that in location A in December, there were only two observations, both showing the same value. Note that I modified the plot to add colors to those problematic points to make the visualization clearer\n\n# Set a color column\nOC$color_pt &lt;- ifelse(OC$Month == \"Dec\" & \n                        OC$FeedingType == \"Stabbers\" & \n                          OC$FeedingPlot == \"A\", \n                      \"red\", \"grey\")\n\n# Here is the code for Figure 3\np_OC &lt;- ggplot() + xlab(\"Feeding type\") + ylab(\"Shell length (mm)\") + \n  geom_point(data = OC,\n             aes(x = FeedingType, y = ShellLength),\n             color = OC$color_pt,\n             position = position_jitter(width = .03),\n             size = 2) + \n  facet_grid(Month ~ FeedingPlot,\n             scales = \"fixed\") + \n  theme_light() +\n  theme(text = element_text(size = 15)) + \n  theme(legend.position = \"none\") + \n  theme(strip.text.y = element_text(size = 15,\n                                    colour = \"black\",\n                                    angle = 20),\n        strip.text.x = element_text(size = 15,\n                                    colour = \"black\",\n                                    angle = 0)\n  )\np_OC\n\n\n\n\nYou should spend a good amount of time on data exploration. It will also help you identify data quality issues and encoding errors.\n\n\nStep 4: Identify the dependency structure in the data\nThe authors warn that it is rare to find a dataset without dependency structures. They advise GLMM as a way to deal with pseudoreplicated data (relying on pooling as a way to properly model dependencies between, say, sampling locations etc..).\nWe now move on to the baboon dataset. I think it is the same dataset used in Statistical Rethinking for teaching multilevel modelling. The design: the researchers are interested in understanding grooming behavior between baboons. Baboon may hold different ranks within the troop (represented as a value between 0 and 1). Some 60 baboons are sampled multiple times, for an hour at a time, its grooming behavior recorded, making the receiver of the behavior another layer of dependency. This pseudoreplication structure requires a mixed-effects model with random effects (two-way nested AND crossed). The structure looks like this:\n\n\n\nBaboon dataset structure\n\n\nThe authors suggest to properly report the structure. Personally I love seeing, in papers, when both a graphical and mathematical description is given.\n\n\nStep 5: Present the statistical model\n\n\nStep 6: Fit the model\n\n\nStep 7: Validate the model\n\n\nStep 8: Interpret and present the numerical output of the model\n\n\nStep 9: Create a visual representation of the model\n\n\nStep 10: Simulate from the model"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website in an exploration of “A protocol for conducting and presenting results of regression-type analyses” by Alain F. Zuur, and Elena N. Ieno."
  }
]