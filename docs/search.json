[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This website in a reproducible exploration of the two Zuur et al. “10 steps papers”\n\n“A protocol for conducting and presenting results of regression-type analyses” by Alain F. Zuur, and Elena N. Ieno.\n“A protocol for data exploration to avoid common statistical problems” by Alain F. Zuur, Elena N. Ieno and Chris S. Elphick."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website in an exploration of “A protocol for conducting and presenting results of regression-type analyses” by Alain F. Zuur, and Elena N. Ieno."
  },
  {
    "objectID": "10stepsRegression.html",
    "href": "10stepsRegression.html",
    "title": "Zuur & Ieno’s 10 steps for regression analyses",
    "section": "",
    "text": "This page is a reproducible exploration of “A protocol for conducting and presenting results of regression-type analyses” by Alain F. Zuur, and Elena N. Ieno.\nThe 10 steps are all first presented in figure 1 of the paper:\n\n\n\nThe 10 steps of regression analyses.\n\n\nThe focus of the 10 steps on on linear modelling of the type GLM, GLMM etc and uses R although it generalizes to other languages.\n\nAccessing data and code for reproducibility\nThe paper provides data and code on Dryad but is not set up for interactive report-style reproducibility with package versioning. To fix that, I used a quarto document with renv to produce this website. In order to reproduce the analysis here, you can clone the repository in RStudio, install the renv package, run renv::restore() and you should be good to go for running the quarto notebook!\nI had to make some changes to the packages used. Let’s load what we will need now. Packages maptools and rgdal are deprecated as far as I can tell, and sp is just not recommendable for forward compatibility in 2024.\n\n# Necessary packages from original code\nlibrary(lattice)  \nlibrary(ggplot2)\nlibrary(ggmap)\nlibrary(lme4)\nlibrary(mgcv)\nlibrary(R2jags)\nlibrary(plyr)\n\n# Recommended by the authors but outdated\n# library(maptools) =&gt; We will use other packages\n# library(sp) =&gt; We won't need it with sf\n# library(rgdal) =&gt; We won't need it with sf\n\n# Using sf\nlibrary(sf)\n\n# Other additionnal packages to improve upon the provided code\n# We also setup for rgl plots in the webpage\nlibrary(lubridate)\nlibrary(gganimate)\nlibrary(here)\nlibrary(leaflet)\nlibrary(equatiomatic)\nlibrary(knitr)\nlibrary(stargazer)\nlibrary(sjPlot)\nlibrary(rgl) ; knitr::knit_hooks$set(webgl = hook_webgl)\nlibrary(htmlwidgets)\n\nIn order to access the data and code, we would ideally use a package like rdryad to do so, but I have been getting nowhere with it. It is probably broken as it is soon to be superseded by the deposits package. If I forget to update this website with the latest deposits API, feel free the file an issue.\nIn the meantime, let’s download the files one by one.\n\n# Create the file urls and destination files names & names\nbase_dryad_url &lt;- \"https://datadryad.org/stash/downloads/file_stream/\"\nfile_url_list &lt;- paste0(base_dryad_url, c(37547:37550))\nfiles_names &lt;- c(\"monkeys.txt\", \"owls.txt\", \"oystercatchers.txt\", \"zurr_iena_2016.R\")\nfiles_paths_list &lt;- paste0(c(rep(\"data/\", 3), \"scripts/\"), files_names)\n\n# If the file exists already, do not download it\nret &lt;- mapply(\\(file_url, file_path) {\n  if (!file.exists(file_path)) download.file(file_url, destfile =  file_path)\n}, file_url_list, files_paths_list)\n\nYou can take a look at the code in the scripts directory, we will be copying code from there into this document. Now, let’s load the data properly before we get anything else done.\n\nOwls &lt;- read.table(here(\"data\", \"owls.txt\"), \n                   header = TRUE,\n                   dec = \".\")\n\n# SiblingNegotiation is too long....use shorter name:\nOwls$NCalls &lt;- Owls$SiblingNegotiation\n\n# Let's look at it\nnames(Owls)\n\n [1] \"Nest\"               \"Xcoord\"             \"Ycoord\"            \n [4] \"FoodTreatment\"      \"SexParent\"          \"ArrivalTime\"       \n [7] \"SiblingNegotiation\" \"BroodSize\"          \"NegPerChick\"       \n[10] \"Date\"               \"Day\"                \"Month\"             \n[13] \"NCalls\"            \n\nstr(Owls)\n\n'data.frame':   599 obs. of  13 variables:\n $ Nest              : chr  \"AutavauxTV\" \"AutavauxTV\" \"AutavauxTV\" \"AutavauxTV\" ...\n $ Xcoord            : int  556216 556216 556216 556216 556216 556216 556216 556216 556216 556216 ...\n $ Ycoord            : int  188756 188756 188756 188756 188756 188756 188756 188756 188756 188756 ...\n $ FoodTreatment     : chr  \"Deprived\" \"Deprived\" \"Deprived\" \"Deprived\" ...\n $ SexParent         : chr  \"Male\" \"Male\" \"Male\" \"Male\" ...\n $ ArrivalTime       : num  22.2 22.5 22.6 22.6 22.6 ...\n $ SiblingNegotiation: int  4 2 2 2 2 18 18 3 3 3 ...\n $ BroodSize         : int  5 5 5 5 5 5 5 5 5 5 ...\n $ NegPerChick       : num  0.8 0.4 0.4 0.4 0.4 3.6 3.6 0.6 0.6 0.6 ...\n $ Date              : chr  \"12/07/97\" \"12/07/97\" \"12/07/97\" \"12/07/97\" ...\n $ Day               : int  12 12 12 12 12 12 12 12 12 12 ...\n $ Month             : int  7 7 7 7 7 7 7 7 7 7 ...\n $ NCalls            : int  4 2 2 2 2 18 18 3 3 3 ...\n\nhead(Owls)\n\n        Nest Xcoord Ycoord FoodTreatment SexParent ArrivalTime\n1 AutavauxTV 556216 188756      Deprived      Male       22.25\n2 AutavauxTV 556216 188756      Deprived      Male       22.53\n3 AutavauxTV 556216 188756      Deprived      Male       22.56\n4 AutavauxTV 556216 188756      Deprived      Male       22.61\n5 AutavauxTV 556216 188756      Deprived      Male       22.65\n6 AutavauxTV 556216 188756      Deprived      Male       22.76\n  SiblingNegotiation BroodSize NegPerChick     Date Day Month NCalls\n1                  4         5         0.8 12/07/97  12     7      4\n2                  2         5         0.4 12/07/97  12     7      2\n3                  2         5         0.4 12/07/97  12     7      2\n4                  2         5         0.4 12/07/97  12     7      2\n5                  2         5         0.4 12/07/97  12     7      2\n6                 18         5         3.6 12/07/97  12     7     18\n\n\n\nOC &lt;- read.table(here(\"data\", \"oystercatchers.txt\"), \n                 header = TRUE,\n                 dec = \".\")\n\n# Let's look at it\nnames(OC)\n\n[1] \"ShellLength\" \"Month\"       \"FeedingType\" \"FeedingPlot\"\n\nstr(OC)\n\n'data.frame':   197 obs. of  4 variables:\n $ ShellLength: num  1.9 2.16 2.17 2.34 2.2 2.2 1.92 2.11 2.17 2.41 ...\n $ Month      : chr  \"Dec\" \"Dec\" \"Dec\" \"Dec\" ...\n $ FeedingType: chr  \"Hammerers\" \"Hammerers\" \"Stabbers\" \"Hammerers\" ...\n $ FeedingPlot: chr  \"B\" \"B\" \"B\" \"B\" ...\n\nhead(OC)\n\n  ShellLength Month FeedingType FeedingPlot\n1        1.90   Dec   Hammerers           B\n2        2.16   Dec   Hammerers           B\n3        2.17   Dec    Stabbers           B\n4        2.34   Dec   Hammerers           B\n5        2.20   Dec    Stabbers           B\n6        2.20   Dec   Hammerers           B\n\n\n\nMonkeys &lt;- read.table(here(\"data\", \"monkeys.txt\"), \n                      header = TRUE)\n\n# Let's look at it\nnames(Monkeys)\n\n [1] \"SubordinateGrooms\" \"DominantGrooms\"    \"RankDifference\"   \n [4] \"Relatedness\"       \"GroomSymmetry\"     \"Time\"             \n [7] \"FocalHour\"         \"FocalGroomer\"      \"Receiver\"         \n[10] \"GroupSize\"        \n\nstr(Monkeys)\n\n'data.frame':   1674 obs. of  10 variables:\n $ SubordinateGrooms: chr  \"yes\" \"yes\" \"yes\" \"yes\" ...\n $ DominantGrooms   : chr  \"no\" \"yes\" \"yes\" \"no\" ...\n $ RankDifference   : num  0.697 0.632 0.169 0.378 0.511 ...\n $ Relatedness      : num  0.224 0.682 0.707 0.291 0.453 ...\n $ GroomSymmetry    : int  1 1 0 1 1 1 0 1 1 1 ...\n $ Time             : num  4.19 5.6 6.16 6.98 2.85 ...\n $ FocalHour        : int  71 72 72 73 74 75 75 75 75 75 ...\n $ FocalGroomer     : chr  \"ade\" \"vic\" \"vic\" \"pre\" ...\n $ Receiver         : chr  \"ban\" \"yao\" \"pre\" \"nai\" ...\n $ GroupSize        : chr  \"large\" \"large\" \"large\" \"large\" ...\n\nhead(Monkeys)\n\n  SubordinateGrooms DominantGrooms RankDifference Relatedness GroomSymmetry\n1               yes             no      0.6969321   0.2238303             1\n2               yes            yes      0.6324555   0.6823489             1\n3               yes            yes      0.1690309   0.7071068             0\n4               yes             no      0.3779645   0.2913760             1\n5               yes            yes      0.5107539   0.4529901             1\n6               yes            yes      0.2948839   0.4539824             1\n      Time FocalHour FocalGroomer Receiver GroupSize\n1 4.186111        71          ade      ban     large\n2 5.601667        72          vic      yao     large\n3 6.164167        72          vic      pre     large\n4 6.976111        73          pre      nai     large\n5 2.850556        74          dys      ver     small\n6 8.605278        75          pox      ecz     small\n\n\n\n\nStep 1: State appropriate questions\nThe key idea is to have the salient question of the analysis in mind at the start, and formulate them properly. The example here is a study on the “vocal behavior of barn owl siblings” with a N = 28. The hypothesis is that food availability will influence “sibling negotiation”, proxied by the number of calls in the nest, sampled with microphones. Half the nests get extra food (treatment: satiated) and the other half is starved (treatment: deprived ; surprisingly no control?).\nThe 3 covariates are time, food treatment (satiated or deprived) and sex of parent. The question is :\n\nDoes the relationship between sibling negotiation and sex of the parent differ with food treatment, and does the effect of time on sibling negotiation differ with food treatment?\n\nNote that the question contains the 3 terms and expected interactions.\nThe authors warn against breaking down the questions into smaller questions such as “Is there an effect of sex of the parent?”, as “A potential problem with this approach is that the residuals of one model may show patterns when compared with the covariates not used in that model, which invalidates the model assumptions.”\nI find this a little surprising because I was taught to build simple models before complex ones, and would naturally work with simpler single covariate models first.\n\n\nStep 2: Visualize the experimental design\nThis step is simple yet sometimes overlooked: visualize the sampling protocol and experimental design preferably with the help of a map.\nBelow we use the sf package to parse the data as spatial data.\n\n# Parse the dataframe as a sf object with the proper projection, and reproject as\n# WGS 84 CRS (LAT / LONG)\nOwls_sf &lt;- st_as_sf(Owls, coords = c(\"Xcoord\", \"Ycoord\"))\n\nWGS84     &lt;- st_crs(\"+proj=longlat +datum=WGS84\")\nprojSWISS &lt;- st_crs(\"+init=epsg:21781\")\n\nWarning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is\ndeprecated. It might return a CRS with a non-EPSG compliant axis order.\n\nst_crs(Owls_sf) &lt;- st_crs(projSWISS)\n\nOwls_sf_tmp &lt;- st_transform(Owls_sf, WGS84)\nOwls_sf_wgs84 &lt;- cbind(Owls_sf_tmp, st_coordinates(Owls_sf_tmp))\n\n# Let's look at it\nhead(Owls_sf_wgs84)\n\nSimple feature collection with 6 features and 13 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6.864574 ymin: 46.84849 xmax: 6.864574 ymax: 46.84849\nGeodetic CRS:  +proj=longlat +datum=WGS84\n        Nest FoodTreatment SexParent ArrivalTime SiblingNegotiation BroodSize\n1 AutavauxTV      Deprived      Male       22.25                  4         5\n2 AutavauxTV      Deprived      Male       22.53                  2         5\n3 AutavauxTV      Deprived      Male       22.56                  2         5\n4 AutavauxTV      Deprived      Male       22.61                  2         5\n5 AutavauxTV      Deprived      Male       22.65                  2         5\n6 AutavauxTV      Deprived      Male       22.76                 18         5\n  NegPerChick     Date Day Month NCalls        X        Y\n1         0.8 12/07/97  12     7      4 6.864574 46.84849\n2         0.4 12/07/97  12     7      2 6.864574 46.84849\n3         0.4 12/07/97  12     7      2 6.864574 46.84849\n4         0.4 12/07/97  12     7      2 6.864574 46.84849\n5         0.4 12/07/97  12     7      2 6.864574 46.84849\n6         3.6 12/07/97  12     7     18 6.864574 46.84849\n                   geometry\n1 POINT (6.864574 46.84849)\n2 POINT (6.864574 46.84849)\n3 POINT (6.864574 46.84849)\n4 POINT (6.864574 46.84849)\n5 POINT (6.864574 46.84849)\n6 POINT (6.864574 46.84849)\n\n\nThe code suggests to write the points as a .kml file to open in Google Earth.\n\n# Write the points as kml, wich you can open in google earth\nowls_kml_file &lt;- here(\"data\", \"Owls_wgs84.kml\")\nif (!file.exists(owls_kml_file)) {\n  st_write(Owls_sf_wgs84, \n           owls_kml_file, \n           driver = \"kml\", delete_dsn = TRUE)\n}\n\nThe code relied ggmap, which makes an API request to Google maps. Of course, in 2024 we are required to use an API key for that. As an alternative I suggest leaflet which is more likely to work in the future and does not require to mess with API keys.\n\nleaflet(Owls_sf_wgs84) %&gt;%\n  addTiles() %&gt;%  # Add default OpenStreetMap map tiles\n  addMarkers()\n\n\n\n\n\nFor a more publication-oriented map with ggmap I would recommend using the stadiamap API.\n\n# I suppress the API message\nglgmap &lt;- suppressMessages(get_stadiamap(c(6.7, 46.70, 7.2, 46.96)))\n\np_ggmap &lt;- ggmap(glgmap) + \n  geom_point(aes(X, Y),\n             data = Owls_sf_wgs84,\n             size = 4) + \n  xlab(\"Longitude\") + ylab(\"Latitude\") + \n  theme(text = element_text(size = 15))\np_ggmap\n\n\n\n\nWe can also do a simple sf + ggplot plot.\n\np_simple &lt;- ggplot(Owls_sf_wgs84) + \n  geom_sf(size = 4) + \n  xlab(\"Longitude\") + ylab(\"Latitude\") + \n  theme_light() + theme(text = element_text(size = 15))\np_simple\n\n\n\n\nFinally, the code suggest another two plots that are not in the paper, but are useful. The first time is a plot of the time series.\n\np_series &lt;- ggplot() + \n  xlab(\"Arrival time\") + ylab(\"Number of calls\") + \n  theme(text = element_text(size = 15)) + theme_light() +\n  geom_point(data = Owls_sf_wgs84,\n             aes(x = ArrivalTime,\n                 y = NCalls,\n                 color = FoodTreatment),\n             size = 2) +\n  geom_line(data = Owls_sf_wgs84,\n            aes(x = ArrivalTime,\n                y = NCalls,\n                group = FoodTreatment,\n                color = FoodTreatment)) + \n  facet_wrap( ~ Nest, ncol = 4)\np_series\n\n\n\n\nThe second shows how sampling unfolds across space and time, but I find the plot a little unwieldy as it facets multiple maps.\n\n# We parse the date column as a proper date\nOwls_sf_wgs84$Date_parsed &lt;- as_date(Owls_sf_wgs84$Date, format = \"%d/%m/%y\")\n\np_ggmap_facet &lt;- ggmap(glgmap) + \n  geom_point(aes(X, Y),\n             data = Owls_sf_wgs84,\n             size = 4) + \n  xlab(\"Longitude\") + ylab(\"Latitude\") + \n  theme(text = element_text(size = 15)) + \n  facet_wrap(~Date_parsed) \n\np_ggmap_facet\n\n\n\n\n\n\nStep 3: Conduct data exploration\nThere is another even older Zurr et al. paper for the 10 steps of data exploration. The first figure of that paper gives you the gist of the protocol (see the other page on this website to reproduce the paper).\n\n\n\nThe 10 steps for data exploration.\n\n\nWe now move from owls to oystercatchers. The study related the length of clams preyed upon and the feeding behavior of oystercatchers, accross time and space. The authors describe how the design suggests a 3-way interaction term that would in practicality only be driven by a couple of data points. The following plot shows that in location A in December, there were only two observations, both showing the same value. Note that I modified the plot to add colors to those problematic points to make the visualization clearer\n\n# Set a color column\nOC$color_pt &lt;- ifelse(OC$Month == \"Dec\" & \n                        OC$FeedingType == \"Stabbers\" & \n                        OC$FeedingPlot == \"A\", \n                      \"red\", \"grey\")\n\n# Here is the code for Figure 3\np_OC &lt;- ggplot() + xlab(\"Feeding type\") + ylab(\"Shell length (mm)\") + \n  geom_point(data = OC,\n             aes(x = FeedingType, y = ShellLength),\n             color = OC$color_pt,\n             position = position_jitter(width = .03),\n             size = 2) + \n  facet_grid(Month ~ FeedingPlot,\n             scales = \"fixed\") + \n  theme_light() +\n  theme(text = element_text(size = 15)) + \n  theme(legend.position = \"none\") + \n  theme(strip.text.y = element_text(size = 15,\n                                    colour = \"black\",\n                                    angle = 20),\n        strip.text.x = element_text(size = 15,\n                                    colour = \"black\",\n                                    angle = 0)\n  )\np_OC\n\n\n\n\nYou should spend a good amount of time on data exploration. It will also help you identify data quality issues and encoding errors.\nNote that it is sometimes useful to tabulate data across levels of a given factor.\n\ntable(OC$Month, OC$FeedingPlot, OC$FeedingType)\n\n, ,  = Hammerers\n\n     \n       A  B  C\n  Dec 17 14 26\n  Jan 43 31 34\n\n, ,  = Stabbers\n\n     \n       A  B  C\n  Dec  2  5 15\n  Jan  4  3  3\n\n\n\n\nStep 4: Identify the dependency structure in the data\nThe authors warn that it is rare to find a dataset without dependency structures. They advise GLMM as a way to deal with pseudoreplicated data (relying on pooling as a way to properly model dependencies between, say, sampling locations etc..).\nWe now move on to the baboon dataset. I think it is the same dataset used in Statistical Rethinking for teaching multilevel modelling. The design: the researchers are interested in understanding grooming behavior between baboons. Baboon may hold different ranks within the troop (represented as a value between 0 and 1). Some 60 baboons are sampled multiple times, for an hour at a time, its grooming behavior recorded, making the receiver of the behavior another layer of dependency. This pseudoreplication structure requires a mixed-effects model with random effects (two-way nested AND crossed). The structure looks like this:\n\n\n\nBaboon dataset structure\n\n\nThe authors suggest to properly report the structure. Personally I love seeing, in papers, when both a graphical, a textual AND a mathematical description is given.\nThe textual description for baboon and owl data:\n\nThis data set consists of multiple observations of rank differences of a given baboon and receivers within a focal hour, along with multiple observations of a given receiver. We therefore applied a mixed-effects model with the random effect focal hour nested within the random effect baboon and a crossed random effect receiver\nWe sampled each nest multiple times and therefore applied a GLMM in which nest is used as random intercept, as this models a dependency structure among sibling negotiation observations of the same nest\n\n\n\nStep 5: Present the statistical model\nSpeaking of mathematical description, this step is where the authors suggest this is given and stated clearly, under the form of an equation. Here is what it would look like for the owl data:\n\n\n\nEquation describing the owl data model\n\n\nOne of the key element in this is how the error structure of the data is stated clearly: here the count of calls is modelled as a Poisson distribution. It shows the log link function and how the model is clearly defined. The authors give further advice for how to explain choices of distributions.\nFor the baboon data:\n\n\n\nEquation describing the baboon data model\n\n\nIf only all papers when to that length in describing their models (although I am definitely guilty of omitting details as well). The amazing package equatiomatic makes this easier.\n\n# Although we will look at the model formulation at the next step in greater\n# details, let's try and use it here with equationmatic\n\nM1 &lt;- glmer(NCalls ~ FoodTreatment + ArrivalTime + SexParent +\n                     FoodTreatment : SexParent +\n                     FoodTreatment : ArrivalTime +\n                     (1 | Nest),\n            family = poisson,\n            data = Owls)\nextract_eq(M1, wrap = TRUE, terms_per_line = 1)\n\n\\[\n\\begin{aligned}\n  \\operatorname{NCalls}_{i}  &\\sim \\operatorname{Poisson}(\\lambda_i) \\\\\n    \\log(\\lambda_i) &=\\alpha_{j[i]}\\ + \\\\\n&\\quad \\beta_{1}(\\operatorname{FoodTreatment}_{\\operatorname{Satiated}})\\ + \\\\\n&\\quad \\beta_{2}(\\operatorname{ArrivalTime})\\ + \\\\\n&\\quad \\beta_{3}(\\operatorname{SexParent}_{\\operatorname{Male}})\\ + \\\\\n&\\quad \\beta_{4}(\\operatorname{FoodTreatment}_{\\operatorname{Satiated}} \\times \\operatorname{SexParent}_{\\operatorname{Male}})\\ + \\\\\n&\\quad \\beta_{5}(\\operatorname{ArrivalTime} \\times \\operatorname{FoodTreatment}_{\\operatorname{Satiated}}) \\\\\n    \\alpha_{j}  &\\sim N \\left(\\mu_{\\alpha_{j}}, \\sigma^2_{\\alpha_{j}} \\right)\n    \\text{, for Nest j = 1,} \\dots \\text{,J}\n\\end{aligned}\n\\]\n\n\n\n\nStep 6: Fit the model\nThe authors first remind that it is important to say what software was used to fit the model, directly in the text. They add details as to how to report a MCMC analysis. This section of the paper is not very verbose and could have been expanded to talk about how versions of packages can be very relevant to the fitted results. Also, the paper could have discussed how fitted models are stored and conserved (with rds files) and implications of all this kind of stuff for the ability of future readers to make sense of the model.\nOne note concerning the owl dataset: in the code, the authors mention that the response variable should probably be transformed (but for some reason they do not show the process). They also mention that brood size should probably be used an offset in the model - but did not want to confuse readers of the paper with it, at the risk of confusing readers of the code by not explaining why and how the offset is needed here.\nLet’s see the model again (note the additional code for the offset, if you want, but we won’t use it for the sake of consistency with the paper).\n\n#For the offset we need:\nOwls$LogBroodSize &lt;- log(Owls$BroodSize)\n\nlibrary(lme4)\nM1 &lt;- glmer(NCalls ~ FoodTreatment + ArrivalTime + SexParent +\n                     FoodTreatment : SexParent +\n                     FoodTreatment : ArrivalTime +\n                     #offset(LogBroodSize) +  #Feel free to include\n                     (1 | Nest),\n            family = poisson,\n            data = Owls)\n\n# Numerical results:\nsummary(M1)\n\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: poisson  ( log )\nFormula: \nNCalls ~ FoodTreatment + ArrivalTime + SexParent + FoodTreatment:SexParent +  \n    FoodTreatment:ArrivalTime + (1 | Nest)\n   Data: Owls\n\n     AIC      BIC   logLik deviance df.resid \n  5011.4   5042.1  -2498.7   4997.4      592 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-3.4559 -1.7563 -0.6413  1.1770 11.1040 \n\nRandom effects:\n Groups Name        Variance Std.Dev.\n Nest   (Intercept) 0.235    0.4847  \nNumber of obs: 599, groups:  Nest, 27\n\nFixed effects:\n                                      Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)                          5.1698547  0.2926462  17.666   &lt;2e-16 ***\nFoodTreatmentSatiated               -0.6540263  0.4686680  -1.396   0.1629    \nArrivalTime                         -0.1296994  0.0113051 -11.473   &lt;2e-16 ***\nSexParentMale                       -0.0094526  0.0453669  -0.208   0.8349    \nFoodTreatmentSatiated:SexParentMale  0.1297493  0.0704391   1.842   0.0655 .  \nFoodTreatmentSatiated:ArrivalTime   -0.0004913  0.0192171  -0.026   0.9796    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) FdTrtS ArrvlT SxPrnM FTS:SP\nFdTrtmntStt -0.545                            \nArrivalTime -0.938  0.570                     \nSexParentMl -0.060  0.055 -0.038              \nFdTrtmS:SPM  0.033 -0.049  0.024 -0.606       \nFdTrtmnS:AT  0.539 -0.993 -0.573  0.004 -0.043\n\n\nFor the Bayesian baboon models, the code to run the model is given later in the script, but it is more appropriately shown here. You can skip this part if you are not familiar with Bayesian methods as this might be more confusing than anything. The authors re-use an example from the course they teach and only provide the minimal code needed to run the model which makes it difficult to get the full picture. That part of the provided code lacks the model validation section, and provide functions (which I have placed in a separate file for simplicity) about which the authors say the reader should not “bother trying to understand”…). Still, let’s source those functions.\n\nsource(here(\"scripts\", \"functions.R\"))\n\nOne of the relevant question to the analysis, which is provided as a code comment (instead of being mentioned in step 1, as I think it should have been) is that Subordinates should prefer to groom more dominant animals earlier in the day. To look at this we need to subset the data.\n\nMonkeys_sub &lt;- Monkeys[Monkeys$SubordinateGrooms == \"yes\",]\n\nThen we prepare the model data to run with JAGS.\n\n# Transfor the response variable:\nN &lt;- nrow(Monkeys_sub)\nMonkeys_sub$RD.scaled &lt;- (Monkeys_sub$RankDifference * (N - 1) + 0.5) / N\n\n# A full explanation  of zero inflatedbeta models is provided in \n# Zuur's Beginner's Guide to Zero-Inflated Models with R' \n\n# For MCMC it is essential to standardize continuous covariates\nMystd &lt;- function(x) {(x - mean(x)) / sd(x)}\nMonkeys_sub$Time.std        &lt;- Mystd(Monkeys_sub$Time)\nMonkeys_sub$Relatedness.std &lt;- Mystd(Monkeys_sub$Relatedness)\n\n# JAGS coding\n# Create X matrix\nX &lt;- model.matrix(~Time.std * Relatedness.std + Relatedness.std * GroupSize,\n                  data = Monkeys_sub)\nK &lt;- ncol(X)\n\n# Random effects:\nreFocalGroomer  &lt;- as.numeric(as.factor(Monkeys_sub$FocalGroomer))\nNumFocalGroomer &lt;- length(unique(Monkeys_sub$FocalGroomer))\n\nreFocalHour  &lt;- as.numeric(as.factor(Monkeys_sub$FocalHour))\nNumFocalHour &lt;- length(unique(Monkeys_sub$FocalHour))\n\nreReceiver  &lt;- as.numeric(as.factor(Monkeys_sub$Receiver))\nNumReceiver &lt;- length(unique(Monkeys_sub$Receiver))\n\n#Put all data for JAGS in a list\nJAGS.data &lt;- list(Y            = Monkeys_sub$RD.scaled,\n                  N            = nrow(Monkeys_sub),\n                  X            = X,\n                  K            = ncol(X),\n                  reFGroomer   = reFocalGroomer,\n                  NumFGroomer  = NumFocalGroomer,\n                  reFHour      = reFocalHour,\n                  NumFHour     = NumFocalHour,\n                  reRec        = reReceiver,\n                  NumReceiver  = NumReceiver\n)\nstr(JAGS.data)\n\nList of 10\n $ Y          : num [1:1178] 0.697 0.632 0.169 0.378 0.511 ...\n $ N          : int 1178\n $ X          : num [1:1178, 1:6] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:1178] \"1\" \"2\" \"3\" \"4\" ...\n  .. ..$ : chr [1:6] \"(Intercept)\" \"Time.std\" \"Relatedness.std\" \"GroupSizesmall\" ...\n  ..- attr(*, \"assign\")= int [1:6] 0 1 2 3 4 5\n  ..- attr(*, \"contrasts\")=List of 1\n  .. ..$ GroupSize: chr \"contr.treatment\"\n $ K          : int 6\n $ reFGroomer : num [1:1178] 2 58 58 47 13 46 46 46 46 30 ...\n $ NumFGroomer: int 59\n $ reFHour    : num [1:1178] 1 2 2 3 4 5 5 5 5 6 ...\n $ NumFHour   : int 573\n $ reRec      : num [1:1178] 5 59 47 41 57 14 14 56 49 57 ...\n $ NumReceiver: int 59\n\n\nWe then run the chains. I do not run the updates as they take too much time on my laptop, hence why the results might not be matching perfectly the reported numbers in the paper.\n\n# JAGS code\njags_file_path &lt;- here(\"jags\", \"BetaRegmm.txt\")\n\nif (!file.exists(jags_file_path)) {\n  sink(jags_file_path)\n  cat(\"\nmodel{\n    #Priors regression parameters, theta\n    for (i in 1:K) { beta[i]  ~ dnorm(0, 0.0001) }\n    theta ~ dunif(0, 20)\n\n    #Priors random effects\n    for (i in 1: NumFGroomer) {a[i] ~ dnorm(0, tau.gr) }\n    for (i in 1: NumFHour)    {b[i] ~ dnorm(0, tau.fh) }\n    for (i in 1: NumReceiver) {c[i] ~ dnorm(0, tau.rc) }\n\n    #Priors for the variances of the random effects\n    tau.gr &lt;- 1 / (sigma.gr * sigma.gr)\n    tau.fh &lt;- 1 / (sigma.fh * sigma.fh)\n    tau.rc &lt;- 1 / (sigma.rc * sigma.rc)\n\n    sigma.gr ~ dunif(0, 10)\n    sigma.fh ~ dunif(0, 10)\n    sigma.rc ~ dunif(0, 10)\n\n    #######################\n    #Likelihood\n    for (i in 1:N){\n      Y[i] ~ dbeta(shape1[i], shape2[i])\n      shape1[i] &lt;- theta * pi[i]\n      shape2[i] &lt;- theta * (1 - pi[i])\n\n      logit(pi[i]) &lt;- eta[i] + a[reFGroomer[i]] + b[reFHour[i]] + c[reRec[i]]\n      eta[i]       &lt;- inprod(beta[], X[i,])\n  }\n}\n\", fill = TRUE)\n  sink()\n}\n\n# Set the initial values for the betas and sigma\ninits &lt;- function() {\n  list(\n    beta  = rnorm(ncol(X), 0, 0.1),\n    theta = runif(0, 20),\n    sigma.gr = runif(0, 10),\n    sigma.fh = runif(0, 10),\n    sigma.rc = runif(0, 10)\n  )  }\n\n#Parameters to estimate\nparams &lt;- c(\"beta\", \"theta\",\n            \"sigma.gr\", \"sigma.fh\", \"sigma.rc\")\n\nmodel_path &lt;- here(\"jags\", \"J0.rds\")\n\nif (!file.exists(model_path)) {\n  J0 &lt;- jags(data = JAGS.data,\n             inits = inits,\n             parameters = params,\n             model.file = jags_file_path,\n             n.thin = 10,\n             n.chains = 3,\n             n.burnin = 4000,\n             n.iter   = 5000)\n  saveRDS(J0, model_path) \n} else {\n  J0 &lt;- readRDS(model_path)\n}\n\n# Fast computer:\n# J1  &lt;- update(J0, n.iter = 10000, n.thin = 10)\n# J2  &lt;- update(J1, n.iter = 50000, n.thin = 10)\n# out &lt;- J2$BUGSoutput\n\nout &lt;- J0$BUGSoutput\nstr(out)\n\nList of 24\n $ n.chains       : int 3\n $ n.iter         : num 5000\n $ n.burnin       : num 4000\n $ n.thin         : num 10\n $ n.keep         : int 100\n $ n.sims         : int 300\n $ sims.array     : num [1:100, 1:3, 1:11] 0.298 0.327 0.282 0.217 0.246 ...\n  ..- attr(*, \"dimnames\")=List of 3\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : chr [1:11] \"beta[1]\" \"beta[2]\" \"beta[3]\" \"beta[4]\" ...\n $ sims.list      :List of 6\n  ..$ beta    : num [1:300, 1:6] 0.2293 0.2488 0.3311 0.0713 0.1399 ...\n  ..$ deviance: num [1:300, 1] -1461 -1610 -1597 -1588 -1573 ...\n  ..$ sigma.fh: num [1:300, 1] 0.197 0.325 0.34 0.264 0.281 ...\n  ..$ sigma.gr: num [1:300, 1] 0.491 0.594 0.496 0.461 0.594 ...\n  ..$ sigma.rc: num [1:300, 1] 0.585 0.603 0.553 0.545 0.484 ...\n  ..$ theta   : num [1:300, 1] 11.8 12.4 12.9 12.7 13.3 ...\n $ sims.matrix    : num [1:300, 1:11] 0.2293 0.2488 0.3311 0.0713 0.1399 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:11] \"beta[1]\" \"beta[2]\" \"beta[3]\" \"beta[4]\" ...\n $ summary        : num [1:11, 1:9] 0.33 -0.0503 -0.0394 -0.2878 0.0413 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:11] \"beta[1]\" \"beta[2]\" \"beta[3]\" \"beta[4]\" ...\n  .. ..$ : chr [1:9] \"mean\" \"sd\" \"2.5%\" \"25%\" ...\n $ mean           :List of 6\n  ..$ beta    : num [1:6(1d)] 0.33 -0.0503 -0.0394 -0.2878 0.0413 ...\n  ..$ deviance: num [1(1d)] -1623\n  ..$ sigma.fh: num [1(1d)] 0.326\n  ..$ sigma.gr: num [1(1d)] 0.551\n  ..$ sigma.rc: num [1(1d)] 0.542\n  ..$ theta   : num [1(1d)] 13.3\n $ sd             :List of 6\n  ..$ beta    : num [1:6(1d)] 0.1565 0.0224 0.0425 0.2546 0.0216 ...\n  ..$ deviance: num [1(1d)] 59.3\n  ..$ sigma.fh: num [1(1d)] 0.0422\n  ..$ sigma.gr: num [1(1d)] 0.0714\n  ..$ sigma.rc: num [1(1d)] 0.0618\n  ..$ theta   : num [1(1d)] 0.877\n $ median         :List of 6\n  ..$ beta    : num [1:6(1d)] 0.3129 -0.0499 -0.0399 -0.2867 0.0391 ...\n  ..$ deviance: num [1(1d)] -1625\n  ..$ sigma.fh: num [1(1d)] 0.332\n  ..$ sigma.gr: num [1(1d)] 0.546\n  ..$ sigma.rc: num [1(1d)] 0.539\n  ..$ theta   : num [1(1d)] 13.2\n $ root.short     : chr [1:6] \"beta\" \"deviance\" \"sigma.fh\" \"sigma.gr\" ...\n $ long.short     :List of 6\n  ..$ : int [1:6] 1 2 3 4 5 6\n  ..$ : int 7\n  ..$ : int 8\n  ..$ : int 9\n  ..$ : int 10\n  ..$ : int 11\n $ dimension.short: num [1:6] 1 0 0 0 0 0\n $ indexes.short  :List of 6\n  ..$ :List of 6\n  .. ..$ : num 1\n  .. ..$ : num 2\n  .. ..$ : num 3\n  .. ..$ : num 4\n  .. ..$ : num 5\n  .. ..$ : num 6\n  ..$ : NULL\n  ..$ : NULL\n  ..$ : NULL\n  ..$ : NULL\n  ..$ : NULL\n $ last.values    :List of 3\n  ..$ :List of 5\n  .. ..$ beta    : num [1:6(1d)] 0.3831 -0.0217 0.0398 -0.3688 0.0303 ...\n  .. ..$ deviance: num [1(1d)] -1560\n  .. ..$ sigma.fh: num [1(1d)] 0.288\n  .. ..$ sigma.gr: num [1(1d)] 0.546\n  .. ..$ sigma.rc: num [1(1d)] 0.517\n  ..$ :List of 5\n  .. ..$ beta    : num [1:6(1d)] 0.04858 -0.06041 -0.00364 -0.02162 0.02057 ...\n  .. ..$ deviance: num [1(1d)] -1507\n  .. ..$ sigma.fh: num [1(1d)] 0.26\n  .. ..$ sigma.gr: num [1(1d)] 0.541\n  .. ..$ sigma.rc: num [1(1d)] 0.406\n  ..$ :List of 5\n  .. ..$ beta    : num [1:6(1d)] 0.1042 -0.041 -0.101 -0.2195 0.0534 ...\n  .. ..$ deviance: num [1(1d)] -1573\n  .. ..$ sigma.fh: num [1(1d)] 0.303\n  .. ..$ sigma.gr: num [1(1d)] 0.537\n  .. ..$ sigma.rc: num [1(1d)] 0.571\n $ program        : chr \"jags\"\n $ model.file     : chr \"/home/vlucet/Documents/WILDLab/repos/ZuurIeno10steps/jags/BetaRegmm.txt\"\n $ isDIC          : logi TRUE\n $ DICbyR         : logi TRUE\n $ pD             : num 1695\n $ DIC            : num 71.9\n - attr(*, \"class\")= chr \"bugs\"\n\n\nWe process the results of the Bayesian model.\n\n# Assess chain mixing (an indication of how well the model ran)\nMyBUGSChains(out,\n             c(uNames(\"beta\", K), \"theta\", \"sigma.gr\", \"sigma.fh\", \"sigma.rc\"))\n\n\n\n\n\n\nStep 7: Validate the model\nWhat is validation? “Model validation confirms that the model complies with underlying assumptions.”\nRegression models have assumptions (in particular about the structure of residuals) and the fore violation of those assumptions may lead to increase bias, type 1 error rate, etc. Residuals should be plotted against all variables (and time and space dimensions if applicable) and autocorellation should be modeled if applicable.\nTo get to the residuals and fitted values:\n\nE1 &lt;- resid(M1, type = \"pearson\")\nF1 &lt;- fitted(M1)\nstr(E1)\n\n Named num [1:599] -1.19 -1.87 -1.87 -1.85 -1.85 ...\n - attr(*, \"names\")= chr [1:599] \"1\" \"2\" \"3\" \"4\" ...\n\nstr(F1)\n\n Named num [1:599] 7.18 6.93 6.9 6.85 6.82 ...\n - attr(*, \"names\")= chr [1:599] \"1\" \"2\" \"3\" \"4\" ...\n\n\nIn the context of the owl data, the authors describe finding a pattern of over dispersion by calculating an over dispersion metric:\n\n# Get the dispersion statistic\n# (not counting random effects as parameters)\nE1 &lt;- resid(M1, type = \"pearson\")\nN  &lt;- nrow(Owls)\np  &lt;- length(fixef(M1)) + 1\nsum(E1^2) / (N - p)\n\n[1] 5.439501\n\n\nNot in the paper, they also flag a potential issue with heterogeneity…\n\nplot(x = F1,\n     y = E1,\n     xlab = \"Fitted values\",\n     ylab = \"Pearson residuals\")\nabline(h = 0, lty = 2)\n\n\n\n\nBuilding up to the next figure in the paper, we plot arrival time against those residuals.\n\nplot(x = Owls$ArrivalTime,\n     y = E1,\n     xlab = \"Arrival time (h)\",\n     ylab = \"Pearson residuals\")\nabline(h = 0, lty = 2)\n\n\n\n\nSuspecting a non-linear structure, the authors decide to fit a GAM on the residuals. As they write in the code “If the smoother is not significant, or if it explains a small amount of variation, then there are indeed no residual patterns.”\n\nT2 &lt;- gam(E1 ~ s(ArrivalTime), data = Owls)\nsummary(T2)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nE1 ~ s(ArrivalTime)\n\nParametric coefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept) -0.01448    0.09185  -0.158    0.875\n\nApproximate significance of smooth terms:\n                 edf Ref.df     F  p-value    \ns(ArrivalTime) 7.159  8.206 5.011 4.88e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.0615   Deviance explained = 7.27%\nGCV = 5.1235  Scale est. = 5.0537    n = 599\n\nplot(T2)\nabline(h = 0, lty = 2)\n\n\n\n\nNow, we can reproduce the next figure in the paper. The authors used a plotting technique for the predictions which consists in creating a grid of arrival times to feed to the predict function. To this we add the smoother and its confidence interval, all of it using ggplot2.\n\ntime_range &lt;- range(Owls$ArrivalTime)\nMyData &lt;- data.frame(ArrivalTime = seq(time_range[1], time_range[2], \n                                       length = 100))\nP &lt;- predict(T2, newdata = MyData, se = TRUE)\nMyData$mu   &lt;- P$fit\nMyData$SeUp &lt;- P$fit + 1.96 * P$se\nMyData$SeLo &lt;- P$fit - 1.96 * P$se\n\nOwls$E1 &lt;- E1\np_M1 &lt;- ggplot() + \n  xlab(\"Arrival time  (h)\") + ylab(\"Pearson residuals\") + \n  theme(text = element_text(size = 15)) + \n  geom_point(data = Owls,\n             aes(x = ArrivalTime, y = E1),\n             size = 1) + \n  geom_line(data = MyData,\n            aes(x = ArrivalTime, y = mu),\n            colour = \"black\") +\n  geom_ribbon(data = MyData,\n              aes(x = ArrivalTime,\n                  ymax = SeUp,\n                  ymin = SeLo ),\n              alpha = 0.2) + \n  geom_hline(yintercept = 0)\np_M1\n\n\n\n\nFrom this exploration of the residuals, the authors conclude that we should be using a GAMM instead…\nA couple of notes: the authors mention in a figure caption that the smooth only explains 7% of the variation in the residuals, which as I understand it (maybe badly), is quite low. They also mention other factors that could be responsible for overdispersion: “a missing covariate, the relatively large number of zero observations (25%) or dependency within (or between) nests”. The pattern with arrival time seems quite clear, and I am left convinced it should be dealt with in the model. I am not left convinced that a complex GAMM would be the first answer, however.\nValidation for the baboon bayesian model is not present in the code.\n\n\nStep 8: Interpret and present the numerical output of the model\nInterpreting complex regression results in R can be complicated, especially when it comes to interaction terms and how they change intercepts and slopes. The authors suggest to report the main results in a table: “estimated parameters, standard errors, t-values, R2 and the estimated variance”. For mixed effects models: report multiple variances, calculate intraclass correlation to derive the R2. For GAMs/GAMMs, make sure to report the effective df of smoothers.\nThe authors report the controversies around reporting p-values. They say: “Their interpretation is prone to abuse, and, for most of the frequentist techniques mentioned, P-values are approximate at best. They must be interpreted with care, and this should be emphasized in the paper. An alternative is to present 95% confidence intervals for the regression parameters and effect size estimates and their precision”.\nConcerning the owl model, writing out the actual effects might help. Here I insert the next equation in the paper:\n\n\n\nEquation expanded for the owl model\n\n\nThe authors simply report the Fixed effects table from summary(M1).\n\nM1_sum &lt;- summary(M1)\nM1_table &lt;- M1_sum$coefficients |&gt; as.data.frame()\nprint(M1_table)\n\n                                         Estimate Std. Error      z value\n(Intercept)                          5.1698547275 0.29264624  17.66588463\nFoodTreatmentSatiated               -0.6540262583 0.46866801  -1.39550010\nArrivalTime                         -0.1296994152 0.01130508 -11.47266482\nSexParentMale                       -0.0094525874 0.04536692  -0.20835861\nFoodTreatmentSatiated:SexParentMale  0.1297492849 0.07043915   1.84200531\nFoodTreatmentSatiated:ArrivalTime   -0.0004913068 0.01921705  -0.02556619\n                                        Pr(&gt;|z|)\n(Intercept)                         7.679934e-70\nFoodTreatmentSatiated               1.628651e-01\nArrivalTime                         1.809982e-30\nSexParentMale                       8.349490e-01\nFoodTreatmentSatiated:SexParentMale 6.547437e-02\nFoodTreatmentSatiated:ArrivalTime   9.796034e-01\n\n\nIn reports, these table came be outputted to a markdown table and nicely formatted.\n\nkable(M1_table)\n\n\n\n\n\n\n\n\n\n\n\n\nEstimate\nStd. Error\nz value\nPr(&gt;|z|)\n\n\n\n\n(Intercept)\n5.1698547\n0.2926462\n17.6658846\n0.0000000\n\n\nFoodTreatmentSatiated\n-0.6540263\n0.4686680\n-1.3955001\n0.1628651\n\n\nArrivalTime\n-0.1296994\n0.0113051\n-11.4726648\n0.0000000\n\n\nSexParentMale\n-0.0094526\n0.0453669\n-0.2083586\n0.8349490\n\n\nFoodTreatmentSatiated:SexParentMale\n0.1297493\n0.0704391\n1.8420053\n0.0654744\n\n\nFoodTreatmentSatiated:ArrivalTime\n-0.0004913\n0.0192171\n-0.0255662\n0.9796034\n\n\n\n\n\nAlternatively, one can use a package designed to deal with tables specifically, such as gtable (for structured tables with tidy data), or more appropriately here, stargazer (to compare models) or sjPlot.\n# Here we use the html for this report, and note the results='asis' code chunck \n# options, but stargazer has other output format options\nstargazer(M1, type = \"html\", flip = TRUE)\n\n\n\n\n\n\n\n\n\n\nDependent variable:\n\n\n\n\n\n\n\n\n\n\n\n\nNCalls\n\n\n\n\n\n\n\n\nFoodTreatmentSatiated\n\n\n-0.654\n\n\n\n\n\n\n(0.469)\n\n\n\n\n\n\n\n\n\n\nArrivalTime\n\n\n-0.130***\n\n\n\n\n\n\n(0.011)\n\n\n\n\n\n\n\n\n\n\nSexParentMale\n\n\n-0.009\n\n\n\n\n\n\n(0.045)\n\n\n\n\n\n\n\n\n\n\nFoodTreatmentSatiated:SexParentMale\n\n\n0.130*\n\n\n\n\n\n\n(0.070)\n\n\n\n\n\n\n\n\n\n\nFoodTreatmentSatiated:ArrivalTime\n\n\n-0.0005\n\n\n\n\n\n\n(0.019)\n\n\n\n\n\n\n\n\n\n\nConstant\n\n\n5.170***\n\n\n\n\n\n\n(0.293)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n599\n\n\n\n\nLog Likelihood\n\n\n-2,498.690\n\n\n\n\nAkaike Inf. Crit.\n\n\n5,011.381\n\n\n\n\nBayesian Inf. Crit.\n\n\n5,042.147\n\n\n\n\n\n\n\n\nNote:\n\n\np&lt;0.1; p&lt;0.05; p&lt;0.01\n\n\n\n\n\ntab_model(M1)\n\n\n\n\n \nNCalls\n\n\nPredictors\nIncidence Rate Ratios\nCI\np\n\n\n(Intercept)\n175.89\n99.11 – 312.13\n&lt;0.001\n\n\nFoodTreatment [Satiated]\n0.52\n0.21 – 1.30\n0.163\n\n\nArrivalTime\n0.88\n0.86 – 0.90\n&lt;0.001\n\n\nSexParent [Male]\n0.99\n0.91 – 1.08\n0.835\n\n\nFoodTreatment [Satiated]× SexParent [Male]\n1.14\n0.99 – 1.31\n0.065\n\n\nFoodTreatment [Satiated]× ArrivalTime\n1.00\n0.96 – 1.04\n0.980\n\n\nRandom Effects\n\n\n\nσ2\n0.16\n\n\n\nτ00 Nest\n0.23\n\n\nICC\n0.59\n\n\nN Nest\n27\n\nObservations\n599\n\n\nMarginal R2 / Conditional R2\n0.267 / 0.699\n\n\n\n\n\n\nThe values in the last equation are produced by expanding the correct values from the table into the formula. Note that here, “the overdispersion and nonlinear pattern in the Pearson residuals invalidate the results”.\nFor MCMC models, the same is applicable. Here is what the equation would look like for a model like the baboon data example (for large groups, as for small groups there need to be a correction, see the paper for the resulting equation):\n\n\n\nExpanded equation for baboon model\n\n\nThe table for this model is treated similarly with kable.\n\n# present output\nOUT1 &lt;- MyBUGSOutput(out,\n                     c(uNames(\"beta\", K), \"sigma.gr\", \"sigma.fh\", \"sigma.rc\", \"theta\"))\nrownames(OUT1)[1:K] &lt;- colnames(X)\nprint(OUT1, digits = 5)\n\n                                    mean       se        2.5%      97.5%\n(Intercept)                     0.330026 0.156454  0.05525310  0.6221030\nTime.std                       -0.050283 0.022368 -0.09657115 -0.0080435\nRelatedness.std                -0.039357 0.042529 -0.11658754  0.0402774\nGroupSizesmall                 -0.287839 0.254589 -0.81645269  0.1611966\nTime.std:Relatedness.std        0.041279 0.021623  0.00014808  0.0831566\nRelatedness.std:GroupSizesmall  0.252929 0.053244  0.14178199  0.3517761\nsigma.gr                        0.551376 0.071424  0.42725554  0.6907920\nsigma.fh                        0.326122 0.042196  0.22980833  0.4011921\nsigma.rc                        0.541729 0.061770  0.43822784  0.6811514\ntheta                          13.253933 0.876666 11.65854514 15.0072451\n\n\n\nkable(OUT1)\n\n\n\n\n\n\n\n\n\n\n\n\nmean\nse\n2.5%\n97.5%\n\n\n\n\n(Intercept)\n0.3300258\n0.1564539\n0.0552531\n0.6221030\n\n\nTime.std\n-0.0502832\n0.0223680\n-0.0965711\n-0.0080435\n\n\nRelatedness.std\n-0.0393575\n0.0425290\n-0.1165875\n0.0402774\n\n\nGroupSizesmall\n-0.2878393\n0.2545893\n-0.8164527\n0.1611966\n\n\nTime.std:Relatedness.std\n0.0412791\n0.0216227\n0.0001481\n0.0831566\n\n\nRelatedness.std:GroupSizesmall\n0.2529292\n0.0532444\n0.1417820\n0.3517761\n\n\nsigma.gr\n0.5513762\n0.0714242\n0.4272555\n0.6907920\n\n\nsigma.fh\n0.3261219\n0.0421959\n0.2298083\n0.4011921\n\n\nsigma.rc\n0.5417293\n0.0617704\n0.4382278\n0.6811514\n\n\ntheta\n13.2539334\n0.8766656\n11.6585451\n15.0072451\n\n\n\n\n\nI am not aware of any packages for pretty printing of JAGS model output tables.\n\n\nStep 9: Create a visual representation of the model\nThis is usually the main “results” figure: a visual plotting of the model in action. One should strive to avoid plotting redundant information while still showing the fitted values and the model variance.\nAgain, the authors remind owl GLMM is “overdispersed, and the residuals contained nonlinear patterns”, which could be improved with a GAMM with nonlinear time arrival effect (then, why not show that, instead of reminding us many times in the paper and the code how bad the analysis actually is). But let’s imagine the GLMM was sufficient and reproduce the next figure in the pap?er. The comments in the original code are quite useful here. I just modified the code to remove a warning.\n\n# A. Specify covariate values for predictions\nMyData &lt;- ddply(Owls,\n                .(SexParent, FoodTreatment),\n                summarize,\n                ArrivalTime = seq(from = min(ArrivalTime),\n                                  to = max(ArrivalTime),\n                                  length = 10))\n\n# B. Create X matrix with expand.grid\nX &lt;- model.matrix(~ FoodTreatment + ArrivalTime + SexParent +\n                    FoodTreatment:SexParent +\n                    FoodTreatment:ArrivalTime,\n                  data = MyData)\n\n# C. Calculate predicted values\nMyData$eta &lt;- X %*% fixef(M1)\nMyData$mu  &lt;- exp(MyData$eta)\n\n# D. Calculate standard errors (SE) for predicted values\n# SE of fitted values are given by the square root of\n# the diagonal elements of: X * cov(betas) * t(X)\nMyData$SE   &lt;- sqrt(diag(X %*% vcov(M1) %*% t(X)))\nMyData$seup &lt;- exp(MyData$eta + 1.96 * MyData$SE)\nMyData$selo &lt;- exp(MyData$eta - 1.96 * MyData$SE)\n\n# E. Plot predicted values +/- 2* SE\np_fitted &lt;- ggplot() + \n  xlab(\"Arrival time (h)\") + ylab(\"Number of calls\") +\n  geom_point(data = Owls,\n             aes(x = ArrivalTime, y = NCalls),\n             position = position_jitter(width = .01),\n             color = grey(0.2),\n             size = 1) +\n  geom_line(data = MyData,\n            aes(x = ArrivalTime,\n                y = mu)) +\n  geom_ribbon(data = MyData,\n              aes(x = ArrivalTime,\n                  ymax = seup,\n                  ymin = selo),\n              alpha = 0.5) + \n  facet_grid(SexParent ~ FoodTreatment,\n             scales = \"fixed\") +\n  theme_light() + theme(text = element_text(size = 15)) + \n  theme(legend.position = \"none\")\np_fitted\n\n\n\n\nFor the baboon model, the authors recommends to plot the model fit in a way that highlights the interactions between the continuous and categorical covariate, as well as between the two continuous covariates. I prefer the paste the entire quote that justifies the 3D plot:\n\nThe figure “shows two planes, one representing the small group and for the other representing the large group. The small group exhibited a positive effect of relatedness on rank differences early in the day and a negative effect later in the day, as well as a negative time effect for low relatedness values and a positive time effect for higher relatedness values. The large group shows a negative relatedness effect early in the day”.\n\nThe code was written before R 4.0 and the breaking change concerning characters no longer being read as factors when loading the data, so we need to change another couple of things to get the expected behavior as well. Let’s get the predictions ready.\n\n#Get the realisations of the betas\nBeta.mcmc &lt;- out$sims.list$beta\n\n# Create a grid of covariate values\ntime_range &lt;- range(Monkeys_sub$Time.std)\nrelate_range &lt;- range(Monkeys_sub$Relatedness.std)\nMyData &lt;- \n  expand.grid(Time.std = seq(time_range[1], time_range[2], length = 15),\n              Relatedness.std = seq(relate_range[1], relate_range[2], length = 15),\n              GroupSize = levels(as.factor(Monkeys_sub$GroupSize)))\n\n# Convert the grid into a X matrix, and calculate the fitted\n# values for each (!) MCMC iteration\nX &lt;- model.matrix(~Time.std * Relatedness.std +\n                    Relatedness.std * GroupSize,\n                  data = MyData)\nBetas &lt;- Beta.mcmc\neta   &lt;- X %*% t(Betas)\nmu    &lt;- exp(eta) / (1 + exp(eta))\n\nL &lt;- MyLinesStuff(mu)\nstr(L) #Posterior mean, se and 95% CI for each of these covariate values\n\n num [1:450, 1:4] 0.651 0.644 0.637 0.63 0.622 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : chr [1:4] \"mean\" \"se\" \"2.5%\" \"97.5%\"\n\n#Glue the results in L to the MyData object\nMyData &lt;- cbind(MyData,L)\nstr(MyData)\n\n'data.frame':   450 obs. of  7 variables:\n $ Time.std       : num  -2.25 -1.96 -1.66 -1.37 -1.07 ...\n $ Relatedness.std: num  -1.41 -1.41 -1.41 -1.41 -1.41 ...\n $ GroupSize      : Factor w/ 2 levels \"large\",\"small\": 1 1 1 1 1 1 1 1 1 1 ...\n $ mean           : num  0.651 0.644 0.637 0.63 0.622 ...\n $ se             : num  0.0425 0.0417 0.041 0.0403 0.0397 ...\n $ 2.5%           : num  0.575 0.57 0.564 0.559 0.552 ...\n $ 97.5%          : num  0.73 0.72 0.711 0.702 0.693 ...\n\n\nThe code to make figure 8 is not like in the paper.\n\n# In the paper we use a slighly different angle. Change\n# the i value, or put a loop around this code in which i\n# runs form 1 to 1000.\ni &lt;- 70\np_3D &lt;- wireframe(mean ~ Time.std + Relatedness.std, \n                  data = MyData,\n                  group = GroupSize,\n                  #zlim = c(0,1),\n                  shade = TRUE,\n                  scales = list(arrows = FALSE),\n                  drape = TRUE, \n                  colorkey = FALSE,\n                  screen = list(z = i, x = -60 - i /5))\nprint(p_3D)\n\n\n\n\nSo let’s try and use a better solution. Both rgl and plotly are great for 3D plotting. Let’s give rgl a try.\n\nplot3d( \n  y = MyData$Relatedness.std, \n  z = MyData$mean, \n  x = MyData$Time.std, \n  # col = data$color, \n  type = 's', \n  radius = .1,\n  ylab = \"Relatedness std\", zlab = \"Mean\", xlab = \"Time.std\"\n)\n\n# saveWidget(rglwidget(width = 520, height = 520), \n#            file = here(\"widgets\", \"rgl_plot.html\"),\n#            libdir = \"libs\",\n#            selfcontained = FALSE\n# )\n\n\n\n\n\nStep 10: Simulate from the model\nIn this section the authors simulate from the model and show that the model underestimates the amount of 0s.\n\nN &lt;- nrow(Owls)\ngg &lt;- simulate(M1, 10000)\n\nzeros &lt;- vector(length = 10000)\nfor (i in 1:10000) {\n  zeros[i] &lt;- sum(gg[,i] == 0) / N\n}\n\nplot(table(zeros), \n     xlim = c(0, 160 / N),\n     axes = FALSE,\n     xlab = \"Percentage of zeros\",\n     ylab = \"Frequency\")\naxis(2)\naxis(1, at = c(0.05, .10, 0.15, 0.20, 0.25),\n     labels = c(\"5%\", \"10%\", \"15%\", \"20%\", \"25%\"))     \npoints(x = sum(Owls$NCalls == 0) / N, y = 0, pch = 16, cex = 3, col = 2)\n\n\n\n\nThey also mention the use of cross-validation and counterfactuals (“what ifs”).\nI found that simulation could have been introduced earlier: simulating specific pattern in the data to make sure our understanding of the model is accurate (a la statistical rethinking)."
  },
  {
    "objectID": "10stepsDataExploration.html",
    "href": "10stepsDataExploration.html",
    "title": "Zuur & Ieno’s 10 steps for data exploration",
    "section": "",
    "text": "This page is a reproducible exploration of “A protocol for data exploration to avoid common statistical problems” by Alain F. Zuur, Elena N. Ieno and Chris S. Elphick.\nThe 10 steps are all first presented in figure 1 of the paper:\n\n\n\nThe 10 steps for data exploration.\n\n\nIn this paper, the authors first warn against “data dredging”, which is when the patterns explored and discovered during data exploration influence data analysis unhealthily. Modeling and testing decisions should be determined a priori, using knowledge of the system and not a posteriori after exploration of the data. When understanding is limited, we can use exploration to help generate hyotheses, but that is fundamentally different from the principled workflow of this paper. Then, the authors warn against certain tests and visual tools, including normality tests."
  }
]