---
title: "Zuur & Ieno's 10 steps"
---

This website in a reproducible exploration of "[A protocol for conducting and presenting results of regression-type analyses](https://besjournals.onlinelibrary.wiley.com/doi/10.1111/2041-210X.12577)" by Alain F. Zuur, and Elena N. Ieno.

The 10 steps are all first presented in figure 1 of the paper:

![The 10 steps](https://besjournals.onlinelibrary.wiley.com/cms/asset/17c3d76c-f2e6-4e2a-a117-581a303cdaef/mee312577-fig-0001-m.png){fig-align="center"}

The focus of the 10 steps on on linear modelling of the type **GLM, GLMM** etc and uses R although it generalizes to other languages.

#### Accessing data and code for reproducibility

The paper provides data and code on Dryad but is not set up for interactive report-style reproducibility with package versioning (see the end of this section for a note about package age). To fix that, I used a quarto document with `renv` to produce this website. In order to reproduce the analysis here, you can clone [the repository](https://github.com/VLucet/ZuurIeno10steps) in [RStudio](https://happygitwithr.com/new-github-first#new-rstudio-project-via-git), install the [`renv`](https://rstudio.github.io/renv/articles/renv.html) package, run `renv::restore()` and you should be good to go for running the quarto notebook!

In order to access the data and code, we would ideally use a package like [`rdryad`](https://github.com/ropensci/rdryad) to do so, but I have been getting nowhere with it. It is probably broken as it is soon to be superseded by the [`deposits`](https://github.com/ropenscilabs/deposits) package. If I forget to update this website with the latest [`deposits` API](https://github.com/ropenscilabs/deposits/issues/41), feel free the [file an issue](https://github.com/VLucet/ZuurIeno10steps/issues).

In the meantime, let's download the files one by one.

```{r, message=FALSE}
# Create the file urls and destination files names & names
base_dryad_url <- "https://datadryad.org/stash/downloads/file_stream/"
file_url_list <- paste0(base_dryad_url, c(37547:37550))
files_names <- c("monkeys.txt", "owls.txt", "oystercatchers.txt", "zurr_iena_2016.R")
files_paths_list <- paste0(c(rep("data/", 3), "scripts/"), files_names)

# If the file exists already, do not download it
ret <- mapply(\(file_url, file_path) {
  if (!file.exists(file_path)) download.file(file_url, destfile =  file_path)
}, file_url_list, files_paths_list)
```

You can take a look at the code in the scripts directory, we will be copying code from there into this document. Now, let's load the data properly before we get anything else done.

```{r}
library(here)
Owls <- read.table(here("data", "owls.txt"), 
                   header = TRUE,
                   dec = ".")

# SiblingNegotiation is too long....use shorter name:
Owls$NCalls <- Owls$SiblingNegotiation

# Let's look at it
names(Owls)
str(Owls)
head(Owls)
```

```{r}
Monkeys <- read.table(here("data", "monkeys.txt"), 
                      header = TRUE)

# Let's look at it
names(Monkeys)
str(Monkeys)
head(Monkeys)
```

```{r}
OC <- read.table(here("data", "oystercatchers.txt"), 
                 header = TRUE,
                 dec = ".")

# Let's look at it
names(OC)
str(OC)
head(OC)
```

Finally, the load the required packages. Packages `maptools` and `rgdal` are deprecated as far as I can tell, and `sp` is just not recommendable for forward compatibility in 2024. We will attempt to update the spatial code.

```{r, message=FALSE}
# Necessary packages
library(lattice)  
library(ggplot2)
library(ggmap)

# Recommended by the authors but outdated
# library(maptools) => We will use other packages
# library(sp) => We won't need it with sf
# library(rgdal) => We won't need it with sf

# Using sf
library(sf)
```

### Step 1: State appropriate questions

The key idea is to have the salient question of the analysis in mind at the start, and formulate them properly. The example here is a study on the "vocal behavior of barn owl siblings" with a N = 28. The hypothesis is that food availability will influence "sibling negociation", proxied by the number of calls in the nest, sampled with microphones. Half the nests get extra food (treatment: satiated) and the other half is starved (treatment: deprived ; surprisingly no control?).

The 3 covariates are *time*, *food treatment (satiated or deprived)* and *sex of parent.* The question is :

-   Does the relationship between sibling negotiation and sex of the parent differ with food treatment, and does the effect of time on sibling negotiation differ with food treatment?

Note that the question contains the 3 terms and expected interactions.

The authors warn against breaking down the questions into smaller questions such as "Is there an effect of sex of the parent?", as "A potential problem with this approach is that the residuals of one model may show patterns when compared with the covariates not used in that model, which invalidates the model assumptions."

I find this a little surprising because I was taught to build simple models before complex ones, and would naturally work with simpler single covariate models first.

### Step 2: Visualize the experimental design

This step is simple yet sometimes overlooked: visualize the sampling protocol and experimental design preferably with the help of a map.

Below we use the `sf` package to parse the data as spatial data.

```{r}
# Parse the dataframe as a sf object with the proper projection, and reproject as
# WGS 84 CRS (LAT / LONG)
Owls_sf <- st_as_sf(Owls, coords = c("Xcoord", "Ycoord"))

WGS84     <- st_crs("+proj=longlat +datum=WGS84")
projSWISS <- st_crs("+init=epsg:21781")
st_crs(Owls_sf) <- st_crs(projSWISS)

Owls_sf_wgs84 <- st_transform(Owls_sf, WGS84)

# Write the points as kml, wich you can open in google earth
owls_kml_file <- here("data", "Owls_wgs84.kml")
if (!file.exists(owls_kml_file)) {
  st_write(Owls_sf_wgs84, 
           owls_kml_file, 
           driver = "kml", delete_dsn = TRUE)
}

# Let's look at it
head(Owls_sf_wgs84)
```

The code relied on a package that makes an API request to google maps. Of course, in 2024 we are required to use an API key for that. Instead we will use `leaflet` which is more likely to work in the future and does not require to mess with API keys.

```{r}
library(leaflet)
leaflet(Owls_sf_wgs84) %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers()
```

We can also do a simple `sf` + `ggplot` plot to simplicity.

```{r}
p <- ggplot(Owls_sf_wgs84)
p <- p + geom_sf(size = 4)
p <- p + xlab("Longitude") + ylab("Latitude")
p <- p + theme_light() + theme(text = element_text(size = 15))
p
```

### Step 3: Conduct data exploration

### Step 4: Identify the dependency structure in the data

### Step 5: Present the statistical model

### Step 6: Fit the model

### Step 7: Validate the model

### Step 8: Interpret and present the numerical output of the model

### Step 9: Create a visual representation of the model

### Step 10: Simulate from the model
